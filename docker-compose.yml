services:
  postgres:
    image: postgres:17
    container_name: pokedex-postgres
    environment:
      POSTGRES_DB: pokedex
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:8
    container_name: pokedex-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend:
    build:
      context: ./pokedex-backend
      dockerfile: Dockerfile
    container_name: pokedex-backend
    environment:
      DATABASE_URL: "postgresql://postgres:postgres123@postgres:5432/pokedex"
      DIRECT_URL: "postgresql://postgres:postgres123@postgres:5432/pokedex"
      REDIS_URL: "redis://redis:6379"
      NODE_ENV: production
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  frontend:
    build:
      context: ./pokedex-frontend
      dockerfile: Dockerfile
    container_name: pokedex-frontend
    environment:
      BACKEND_API_URL: "http://localhost:3000"
      NODE_ENV: production
    ports:
      - "8081:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped


volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: pokedex-network
