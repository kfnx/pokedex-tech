name: Deploy to Production

on:
  workflow_run:
    workflows: ["Lint and Typecheck", "Unit Test", "E2E test with Playwright"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-prerequisites:
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      all-success: ${{ steps.check.outputs.all-success }}
    steps:
      - name: Check all workflows succeeded
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const requiredWorkflows = [
              'Lint and Typecheck',
              'Unit Test',
              'E2E test with Playwright'
            ];

            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: context.payload.workflow_run.head_sha,
              per_page: 100
            });

            const workflowResults = {};
            for (const run of runs.workflow_runs) {
              if (requiredWorkflows.includes(run.name) && run.head_sha === context.payload.workflow_run.head_sha) {
                workflowResults[run.name] = run.conclusion;
              }
            }

            console.log('Workflow results:', workflowResults);

            const allSuccess = requiredWorkflows.every(name =>
              workflowResults[name] === 'success'
            );

            console.log('All workflows successful:', allSuccess);
            core.setOutput('all-success', allSuccess);

  build-and-push:
    needs: check-prerequisites
    runs-on: ubuntu-22.04
    if: ${{ needs.check-prerequisites.outputs.all-success == 'true' }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./pokedex-frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./pokedex-backend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              rm get-docker.sh
            fi

            # Clone repository if it doesn't exist
            if [ ! -d "~/pokedex-voltron" ]; then
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git ~/pokedex-voltron
            fi

            # Navigate and update
            cd ~/pokedex-voltron
            git pull origin main

            # Create .env file if it doesn't exist
            if [ ! -f pokedex-backend/.env ]; then
              echo "Creating .env file..."
              echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > pokedex-backend/.env
              echo "DIRECT_URL=${{ secrets.DIRECT_URL }}" >> pokedex-backend/.env
              echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> pokedex-backend/.env
            fi

            # Set environment variables for Docker Compose
            export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
            export GITHUB_REPOSITORY=${{ github.repository }}
            export VERSION=latest

            # Deploy with Docker Compose
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml down || true
            docker compose -f docker-compose.production.yml up -d --force-recreate
            docker system prune -f
